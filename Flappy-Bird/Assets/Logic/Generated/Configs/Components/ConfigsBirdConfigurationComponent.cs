//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentContextApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class ConfigsContext {

    public ConfigsEntity birdConfigurationEntity { get { return GetGroup(ConfigsMatcher.BirdConfiguration).GetSingleEntity(); } }
    public FlappyBird.Gameplay.Bird.BirdConfiguration birdConfiguration { get { return birdConfigurationEntity.birdConfiguration; } }
    public bool hasBirdConfiguration { get { return birdConfigurationEntity != null; } }

    public ConfigsEntity SetBirdConfiguration(UnityEngine.Transform newSpawnPoint, UnityEngine.GameObject newPrefab, UnityEngine.InputSystem.InputAction newFlyUpAction, float newAcceleration, float newMaxVelocity, float newMinVelocity) {
        if (hasBirdConfiguration) {
            throw new Entitas.EntitasException("Could not set BirdConfiguration!\n" + this + " already has an entity with FlappyBird.Gameplay.Bird.BirdConfiguration!",
                "You should check if the context already has a birdConfigurationEntity before setting it or use context.ReplaceBirdConfiguration().");
        }
        var entity = CreateEntity();
        entity.AddBirdConfiguration(newSpawnPoint, newPrefab, newFlyUpAction, newAcceleration, newMaxVelocity, newMinVelocity);
        return entity;
    }

    public void ReplaceBirdConfiguration(UnityEngine.Transform newSpawnPoint, UnityEngine.GameObject newPrefab, UnityEngine.InputSystem.InputAction newFlyUpAction, float newAcceleration, float newMaxVelocity, float newMinVelocity) {
        var entity = birdConfigurationEntity;
        if (entity == null) {
            entity = SetBirdConfiguration(newSpawnPoint, newPrefab, newFlyUpAction, newAcceleration, newMaxVelocity, newMinVelocity);
        } else {
            entity.ReplaceBirdConfiguration(newSpawnPoint, newPrefab, newFlyUpAction, newAcceleration, newMaxVelocity, newMinVelocity);
        }
    }

    public void RemoveBirdConfiguration() {
        birdConfigurationEntity.Destroy();
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class ConfigsEntity {

    public FlappyBird.Gameplay.Bird.BirdConfiguration birdConfiguration { get { return (FlappyBird.Gameplay.Bird.BirdConfiguration)GetComponent(ConfigsComponentsLookup.BirdConfiguration); } }
    public bool hasBirdConfiguration { get { return HasComponent(ConfigsComponentsLookup.BirdConfiguration); } }

    public void AddBirdConfiguration(UnityEngine.Transform newSpawnPoint, UnityEngine.GameObject newPrefab, UnityEngine.InputSystem.InputAction newFlyUpAction, float newAcceleration, float newMaxVelocity, float newMinVelocity) {
        var index = ConfigsComponentsLookup.BirdConfiguration;
        var component = (FlappyBird.Gameplay.Bird.BirdConfiguration)CreateComponent(index, typeof(FlappyBird.Gameplay.Bird.BirdConfiguration));
        component.SpawnPoint = newSpawnPoint;
        component.Prefab = newPrefab;
        component.FlyUpAction = newFlyUpAction;
        component.Acceleration = newAcceleration;
        component.MaxVelocity = newMaxVelocity;
        component.MinVelocity = newMinVelocity;
        AddComponent(index, component);
    }

    public void ReplaceBirdConfiguration(UnityEngine.Transform newSpawnPoint, UnityEngine.GameObject newPrefab, UnityEngine.InputSystem.InputAction newFlyUpAction, float newAcceleration, float newMaxVelocity, float newMinVelocity) {
        var index = ConfigsComponentsLookup.BirdConfiguration;
        var component = (FlappyBird.Gameplay.Bird.BirdConfiguration)CreateComponent(index, typeof(FlappyBird.Gameplay.Bird.BirdConfiguration));
        component.SpawnPoint = newSpawnPoint;
        component.Prefab = newPrefab;
        component.FlyUpAction = newFlyUpAction;
        component.Acceleration = newAcceleration;
        component.MaxVelocity = newMaxVelocity;
        component.MinVelocity = newMinVelocity;
        ReplaceComponent(index, component);
    }

    public void RemoveBirdConfiguration() {
        RemoveComponent(ConfigsComponentsLookup.BirdConfiguration);
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class ConfigsMatcher {

    static Entitas.IMatcher<ConfigsEntity> _matcherBirdConfiguration;

    public static Entitas.IMatcher<ConfigsEntity> BirdConfiguration {
        get {
            if (_matcherBirdConfiguration == null) {
                var matcher = (Entitas.Matcher<ConfigsEntity>)Entitas.Matcher<ConfigsEntity>.AllOf(ConfigsComponentsLookup.BirdConfiguration);
                matcher.componentNames = ConfigsComponentsLookup.componentNames;
                _matcherBirdConfiguration = matcher;
            }

            return _matcherBirdConfiguration;
        }
    }
}
